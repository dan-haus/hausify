DEBUG:asyncio:Using selector: KqueueSelector
INFO:pygls.feature_manager:Registered builtin feature exit
INFO:pygls.feature_manager:Registered builtin feature initialize
INFO:pygls.feature_manager:Registered builtin feature initialized
INFO:pygls.feature_manager:Registered builtin feature notebookDocument/didChange
INFO:pygls.feature_manager:Registered builtin feature notebookDocument/didClose
INFO:pygls.feature_manager:Registered builtin feature notebookDocument/didOpen
INFO:pygls.feature_manager:Registered builtin feature $/setTrace
INFO:pygls.feature_manager:Registered builtin feature shutdown
INFO:pygls.feature_manager:Registered builtin feature textDocument/didChange
INFO:pygls.feature_manager:Registered builtin feature textDocument/didClose
INFO:pygls.feature_manager:Registered builtin feature textDocument/didOpen
INFO:pygls.feature_manager:Registered builtin feature window/workDoneProgress/cancel
INFO:pygls.feature_manager:Registered builtin feature workspace/didChangeWorkspaceFolders
INFO:pygls.feature_manager:Registered builtin feature workspace/executeCommand
INFO:pygls.feature_manager:Registered "textDocument/didOpen" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/didSave" with options "SaveOptions(include_text=True)"
INFO:pygls.feature_manager:Registered "textDocument/formatting" with options "None"
INFO:pygls.server:Starting IO server
DEBUG:pygls.server:Content length: 5871
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 5871\r\n\r\n{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":82934,"clientInfo":{"name":"Visual Studio Code","version":"1.101.1"},"locale":"en","rootPath":"/Users/walt/PERSONAL/hausify","rootUri":"file:///Users/walt/PERSONAL/hausify","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"configuration":true,"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"codeLens":{"refreshSupport":true},"executeCommand":{"dynamicRegistration":true},"didChangeConfiguration":{"dynamicRegistration":true},"workspaceFolders":true,"foldingRange":{"refreshSupport":true},"semanticTokens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"didRename":true,"didDelete":true,"willCreate":true,"willRename":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true},"diagnostics":{"refreshSupport":true}},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]},"codeDescriptionSupport":true,"dataSupport":true},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"insertTextMode":2,"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode","data"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]},"labelSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit"]},"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"honorsChangeAnnotations":true},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true,"rangesSupport":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"requests":{"range":true,"full":{"delta":true}},"multilineTokenSupport":false,"overlappingTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"linkedEditingRange":{"dynamicRegistration":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"window":{"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true},"workDoneProgress":true},"general":{"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"positionEncodings":["utf-16"]},"notebookDocument":{"synchronization":{"dynamicRegistration":true,"executionSummarySupport":true}}},"trace":"off","workspaceFolders":[{"uri":"file:///Users/walt/PERSONAL/hausify","name":"hausify"}]}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
INFO:pygls.protocol.language_server:Language server initialized InitializeParams(capabilities=ClientCapabilities(workspace=WorkspaceClientCapabilities(apply_edit=True, workspace_edit=WorkspaceEditClientCapabilities(document_changes=True, resource_operations=[<ResourceOperationKind.Create: 'create'>, <ResourceOperationKind.Rename: 'rename'>, <ResourceOperationKind.Delete: 'delete'>], failure_handling=<FailureHandlingKind.TextOnlyTransactional: 'textOnlyTransactional'>, normalizes_line_endings=True, change_annotation_support=WorkspaceEditClientCapabilitiesChangeAnnotationSupportType(groups_on_label=True)), did_change_configuration=DidChangeConfigurationClientCapabilities(dynamic_registration=True), did_change_watched_files=DidChangeWatchedFilesClientCapabilities(dynamic_registration=True, relative_pattern_support=True), symbol=WorkspaceSymbolClientCapabilities(dynamic_registration=True, symbol_kind=WorkspaceSymbolClientCapabilitiesSymbolKindType(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), tag_support=WorkspaceSymbolClientCapabilitiesTagSupportType(value_set=[<SymbolTag.Deprecated: 1>]), resolve_support=WorkspaceSymbolClientCapabilitiesResolveSupportType(properties=['location.range'])), execute_command=ExecuteCommandClientCapabilities(dynamic_registration=True), workspace_folders=True, configuration=True, semantic_tokens=SemanticTokensWorkspaceClientCapabilities(refresh_support=True), code_lens=CodeLensWorkspaceClientCapabilities(refresh_support=True), file_operations=FileOperationClientCapabilities(dynamic_registration=True, did_create=True, will_create=True, did_rename=True, will_rename=True, did_delete=True, will_delete=True), inline_value=InlineValueWorkspaceClientCapabilities(refresh_support=True), inlay_hint=InlayHintWorkspaceClientCapabilities(refresh_support=True), diagnostics=DiagnosticWorkspaceClientCapabilities(refresh_support=True), folding_range=FoldingRangeWorkspaceClientCapabilities(refresh_support=True)), text_document=TextDocumentClientCapabilities(synchronization=TextDocumentSyncClientCapabilities(dynamic_registration=True, will_save=True, will_save_wait_until=True, did_save=True), completion=CompletionClientCapabilities(dynamic_registration=True, completion_item=CompletionClientCapabilitiesCompletionItemType(snippet_support=True, commit_characters_support=True, documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], deprecated_support=True, preselect_support=True, tag_support=CompletionClientCapabilitiesCompletionItemTypeTagSupportType(value_set=[<CompletionItemTag.Deprecated: 1>]), insert_replace_support=True, resolve_support=CompletionClientCapabilitiesCompletionItemTypeResolveSupportType(properties=['documentation', 'detail', 'additionalTextEdits']), insert_text_mode_support=CompletionClientCapabilitiesCompletionItemTypeInsertTextModeSupportType(value_set=[<InsertTextMode.AsIs: 1>, <InsertTextMode.AdjustIndentation: 2>]), label_details_support=True), completion_item_kind=CompletionClientCapabilitiesCompletionItemKindType(value_set=[<CompletionItemKind.Text: 1>, <CompletionItemKind.Method: 2>, <CompletionItemKind.Function: 3>, <CompletionItemKind.Constructor: 4>, <CompletionItemKind.Field: 5>, <CompletionItemKind.Variable: 6>, <CompletionItemKind.Class: 7>, <CompletionItemKind.Interface: 8>, <CompletionItemKind.Module: 9>, <CompletionItemKind.Property: 10>, <CompletionItemKind.Unit: 11>, <CompletionItemKind.Value: 12>, <CompletionItemKind.Enum: 13>, <CompletionItemKind.Keyword: 14>, <CompletionItemKind.Snippet: 15>, <CompletionItemKind.Color: 16>, <CompletionItemKind.File: 17>, <CompletionItemKind.Reference: 18>, <CompletionItemKind.Folder: 19>, <CompletionItemKind.EnumMember: 20>, <CompletionItemKind.Constant: 21>, <CompletionItemKind.Struct: 22>, <CompletionItemKind.Event: 23>, <CompletionItemKind.Operator: 24>, <CompletionItemKind.TypeParameter: 25>]), insert_text_mode=<InsertTextMode.AdjustIndentation: 2>, context_support=True, completion_list=CompletionClientCapabilitiesCompletionListType(item_defaults=['commitCharacters', 'editRange', 'insertTextFormat', 'insertTextMode', 'data'])), hover=HoverClientCapabilities(dynamic_registration=True, content_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>]), signature_help=SignatureHelpClientCapabilities(dynamic_registration=True, signature_information=SignatureHelpClientCapabilitiesSignatureInformationType(documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], parameter_information=SignatureHelpClientCapabilitiesSignatureInformationTypeParameterInformationType(label_offset_support=True), active_parameter_support=True), context_support=True), declaration=DeclarationClientCapabilities(dynamic_registration=True, link_support=True), definition=DefinitionClientCapabilities(dynamic_registration=True, link_support=True), type_definition=TypeDefinitionClientCapabilities(dynamic_registration=True, link_support=True), implementation=ImplementationClientCapabilities(dynamic_registration=True, link_support=True), references=ReferenceClientCapabilities(dynamic_registration=True), document_highlight=DocumentHighlightClientCapabilities(dynamic_registration=True), document_symbol=DocumentSymbolClientCapabilities(dynamic_registration=True, symbol_kind=DocumentSymbolClientCapabilitiesSymbolKindType(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), hierarchical_document_symbol_support=True, tag_support=DocumentSymbolClientCapabilitiesTagSupportType(value_set=[<SymbolTag.Deprecated: 1>]), label_support=True), code_action=CodeActionClientCapabilities(dynamic_registration=True, code_action_literal_support=CodeActionClientCapabilitiesCodeActionLiteralSupportType(code_action_kind=CodeActionClientCapabilitiesCodeActionLiteralSupportTypeCodeActionKindType(value_set=['', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 'refactor.rewrite', 'source', 'source.organizeImports'])), is_preferred_support=True, disabled_support=True, data_support=True, resolve_support=CodeActionClientCapabilitiesResolveSupportType(properties=['edit']), honors_change_annotations=True), code_lens=CodeLensClientCapabilities(dynamic_registration=True), document_link=DocumentLinkClientCapabilities(dynamic_registration=True, tooltip_support=True), color_provider=DocumentColorClientCapabilities(dynamic_registration=True), formatting=DocumentFormattingClientCapabilities(dynamic_registration=True), range_formatting=DocumentRangeFormattingClientCapabilities(dynamic_registration=True, ranges_support=True), on_type_formatting=DocumentOnTypeFormattingClientCapabilities(dynamic_registration=True), rename=RenameClientCapabilities(dynamic_registration=True, prepare_support=True, prepare_support_default_behavior=<PrepareSupportDefaultBehavior.Identifier: 1>, honors_change_annotations=True), folding_range=FoldingRangeClientCapabilities(dynamic_registration=True, range_limit=5000, line_folding_only=True, folding_range_kind=FoldingRangeClientCapabilitiesFoldingRangeKindType(value_set=['comment', 'imports', 'region']), folding_range=FoldingRangeClientCapabilitiesFoldingRangeType(collapsed_text=False)), selection_range=SelectionRangeClientCapabilities(dynamic_registration=True), publish_diagnostics=PublishDiagnosticsClientCapabilities(related_information=True, tag_support=PublishDiagnosticsClientCapabilitiesTagSupportType(value_set=[<DiagnosticTag.Unnecessary: 1>, <DiagnosticTag.Deprecated: 2>]), version_support=False, code_description_support=True, data_support=True), call_hierarchy=CallHierarchyClientCapabilities(dynamic_registration=True), semantic_tokens=SemanticTokensClientCapabilities(requests=SemanticTokensClientCapabilitiesRequestsType(range=True, full=SemanticTokensClientCapabilitiesRequestsTypeFullType1(delta=True)), token_types=['namespace', 'type', 'class', 'enum', 'interface', 'struct', 'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 'number', 'regexp', 'operator', 'decorator'], token_modifiers=['declaration', 'definition', 'readonly', 'static', 'deprecated', 'abstract', 'async', 'modification', 'documentation', 'defaultLibrary'], formats=[<TokenFormat.Relative: 'relative'>], dynamic_registration=True, overlapping_token_support=False, multiline_token_support=False, server_cancel_support=True, augments_syntax_tokens=True), linked_editing_range=LinkedEditingRangeClientCapabilities(dynamic_registration=True), moniker=None, type_hierarchy=TypeHierarchyClientCapabilities(dynamic_registration=True), inline_value=InlineValueClientCapabilities(dynamic_registration=True), inlay_hint=InlayHintClientCapabilities(dynamic_registration=True, resolve_support=InlayHintClientCapabilitiesResolveSupportType(properties=['tooltip', 'textEdits', 'label.tooltip', 'label.location', 'label.command'])), diagnostic=DiagnosticClientCapabilities(dynamic_registration=True, related_document_support=False), inline_completion=None), notebook_document=NotebookDocumentClientCapabilities(synchronization=NotebookDocumentSyncClientCapabilities(dynamic_registration=True, execution_summary_support=True)), window=WindowClientCapabilities(work_done_progress=True, show_message=ShowMessageRequestClientCapabilities(message_action_item=ShowMessageRequestClientCapabilitiesMessageActionItemType(additional_properties_support=True)), show_document=ShowDocumentClientCapabilities(support=True)), general=GeneralClientCapabilities(stale_request_support=GeneralClientCapabilitiesStaleRequestSupportType(cancel=True, retry_on_content_modified=['textDocument/semanticTokens/full', 'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta']), regular_expressions=RegularExpressionsClientCapabilities(engine='ECMAScript', version='ES2020'), markdown=MarkdownClientCapabilities(parser='marked', version='1.1.0', allowed_tags=None), position_encodings=['utf-16']), experimental=None), process_id=82934, client_info=InitializeParamsClientInfoType(name='Visual Studio Code', version='1.101.1'), locale='en', root_path='/Users/walt/PERSONAL/hausify', root_uri='file:///Users/walt/PERSONAL/hausify', initialization_options=None, trace=<TraceValues.Off: 'off'>, work_done_token=None, workspace_folders=[WorkspaceFolder(uri='file:///Users/walt/PERSONAL/hausify', name='hausify')])
DEBUG:pygls.protocol.language_server:Server capabilities: {"positionEncoding": "utf-16", "textDocumentSync": {"openClose": true, "change": 2, "willSave": false, "willSaveWaitUntil": false, "save": {"includeText": true}}, "documentFormattingProvider": true, "executeCommandProvider": {"commands": []}, "workspace": {"workspaceFolders": {"supported": true, "changeNotifications": true}, "fileOperations": {}}}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"positionEncoding": "utf-16", "textDocumentSync": {"openClose": true, "change": 2, "willSave": false, "willSaveWaitUntil": false, "save": {"includeText": true}}, "documentFormattingProvider": true, "executeCommandProvider": {"commands": []}, "workspace": {"workspaceFolders": {"supported": true, "changeNotifications": true}, "fileOperations": {}}}, "serverInfo": {"name": "hausify", "version": "v0.1"}}}
DEBUG:pygls.server:Content length: 52
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 52\r\n\r\n{"jsonrpc":"2.0","method":"initialized","params":{}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 4252
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 4252\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/walt/PERSONAL/hausify/hausify/main.py","languageId":"python","version":1,"text":"import sys\\nfrom subprocess import run as subprocess_run\\n\\nfrom hausify.args import parse_args\\nfrom hausify.runners import exec_black\\nfrom hausify.runners import exec_docformatter\\nfrom hausify.runners import exec_flake8\\nfrom hausify.runners import exec_isort\\nfrom hausify.runners import exec_mypy\\nfrom hausify.runners.runner import ToolResult\\nfrom hausify.timings import Timings\\nfrom hausify.util.filesystem import SourceTree\\n\\n\\ndef main() -> None:\\n    args = parse_args()\\n\\n    tree = SourceTree(\\n        args.rootdir,\\n        args.files,\\n        args.exclude_dir,\\n    )\\n\\n    should_exit = False\\n\\n    tool_timings: dict[str, Timings] = {}\\n\\n    if args.tool == \\"all\\" or args.tool == \\"isort\\":\\n        tool_timings[\\"isort\\"] = Timings()\\n        results = exec_isort(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.isort_mode,\\n        )\\n        tool_timings[\\"isort\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"ISORT\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"docformatter\\":\\n        tool_timings[\\"docformatter\\"] = Timings()\\n        results = exec_docformatter(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.docformatter_mode,\\n        )\\n        tool_timings[\\"docformatter\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"DOCFORMATTER\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"mypy\\":\\n        tool_timings[\\"mypy\\"] = Timings()\\n        results = exec_mypy(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n        )\\n        tool_timings[\\"mypy\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"MYPY\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"black\\":\\n        tool_timings[\\"black\\"] = Timings()\\n        results = exec_black(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.black_mode,\\n        )\\n        tool_timings[\\"black\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"BLACK\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"flake8\\":\\n        tool_timings[\\"flake8\\"] = Timings()\\n        results = exec_flake8(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n        )\\n        tool_timings[\\"flake8\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"FLAKE8\\", results)\\n\\n    if should_exit:\\n        sys.exit(1)\\n\\n\\ndef print_timings(timings: dict[str, Timings]) -> None:\\n    \\"\\"\\"Print timings for each tool.\\"\\"\\"\\n    print(\\"\\\\n\\\\nTIMINGS:\\")\\n    print(\\"=\\" * 20)\\n    for tool, timing in timings.items():\\n        if timing is not None:\\n            duration_ms = timing.duration_ms\\n            print(f\\"{tool.upper()}: {duration_ms} ms\\")\\n        else:\\n            print(f\\"{tool.upper()}: Not executed\\")\\n    print(\\"=\\" * 20, \\"\\\\n\\\\n\\")\\n\\n\\ndef print_errors(tool: str, errors: str) -> None:\\n    pass\\n\\n\\ndef print_results(tool: str, results: list[ToolResult]) -> None:\\n    \\"\\"\\"Print errors for a specific tool.\\"\\"\\"\\n    print(\\"|  \\", \\"=\\" * 20)\\n    print(\\"|   TOOL:\\", tool.upper())\\n    print(\\"|  \\", \\"=\\" * 20)\\n    for result in results:\\n        if not result.success:\\n            print(f\\"|   == ERRORS (from config: {result.config})\\")\\n            for error in result.errors:\\n                if error.strip() == \\"\\":\\n                    continue\\n                print(f\\"|        {error}\\")\\n    print(\\"\\\\n\\" * 2)\\n\\n\\nif __name__ == \\"__main__\\":\\n    main()\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///Users/walt/PERSONAL/hausify/hausify/main.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///Users/walt/PERSONAL/hausify/hausify/main.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 4218
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 4218\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/walt/PERSONAL/hausify/hausify/main.py"},"text":"import sys\\nfrom subprocess import run as subprocess_run\\n\\nfrom hausify.args import parse_args\\nfrom hausify.runners import exec_black\\nfrom hausify.runners import exec_docformatter\\nfrom hausify.runners import exec_flake8\\nfrom hausify.runners import exec_isort\\nfrom hausify.runners import exec_mypy\\nfrom hausify.runners.runner import ToolResult\\nfrom hausify.timings import Timings\\nfrom hausify.util.filesystem import SourceTree\\n\\n\\ndef main() -> None:\\n    args = parse_args()\\n\\n    tree = SourceTree(\\n        args.rootdir,\\n        args.files,\\n        args.exclude_dir,\\n    )\\n\\n    should_exit = False\\n\\n    tool_timings: dict[str, Timings] = {}\\n\\n    if args.tool == \\"all\\" or args.tool == \\"isort\\":\\n        tool_timings[\\"isort\\"] = Timings()\\n        results = exec_isort(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.isort_mode,\\n        )\\n        tool_timings[\\"isort\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"ISORT\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"docformatter\\":\\n        tool_timings[\\"docformatter\\"] = Timings()\\n        results = exec_docformatter(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.docformatter_mode,\\n        )\\n        tool_timings[\\"docformatter\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"DOCFORMATTER\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"mypy\\":\\n        tool_timings[\\"mypy\\"] = Timings()\\n        results = exec_mypy(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n        )\\n        tool_timings[\\"mypy\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"MYPY\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"black\\":\\n        tool_timings[\\"black\\"] = Timings()\\n        results = exec_black(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.black_mode,\\n        )\\n        tool_timings[\\"black\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"BLACK\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"flake8\\":\\n        tool_timings[\\"flake8\\"] = Timings()\\n        results = exec_flake8(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n        )\\n        tool_timings[\\"flake8\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"FLAKE8\\", results)\\n\\n    if should_exit:\\n        sys.exit(1)\\n\\n\\ndef print_timings(timings: dict[str, Timings]) -> None:\\n    \\"\\"\\"Print timings for each tool.\\"\\"\\"\\n    print(\\"\\\\n\\\\nTIMINGS:\\")\\n    print(\\"=\\" * 20)\\n    for tool, timing in timings.items():\\n        if timing is not None:\\n            duration_ms = timing.duration_ms\\n            print(f\\"{tool.upper()}: {duration_ms} ms\\")\\n        else:\\n            print(f\\"{tool.upper()}: Not executed\\")\\n    print(\\"=\\" * 20, \\"\\\\n\\\\n\\")\\n\\n\\ndef print_errors(tool: str, errors: str) -> None:\\n    pass\\n\\n\\ndef print_results(tool: str, results: list[ToolResult]) -> None:\\n    \\"\\"\\"Print errors for a specific tool.\\"\\"\\"\\n    print(\\"|  \\", \\"=\\" * 20)\\n    print(\\"|   TOOL:\\", tool.upper())\\n    print(\\"|  \\", \\"=\\" * 20)\\n    for result in results:\\n        if not result.success:\\n            print(f\\"|   == ERRORS (from config: {result.config})\\")\\n            for error in result.errors:\\n                if error.strip() == \\"\\":\\n                    continue\\n                print(f\\"|        {error}\\")\\n    print(\\"\\\\n\\" * 2)\\n\\n\\nif __name__ == \\"__main__\\":\\n    main()\\n"}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///Users/walt/PERSONAL/hausify/hausify/main.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///Users/walt/PERSONAL/hausify/hausify/main.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 417
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 417\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/walt/PERSONAL/hausify/hausify/main.py","version":2},"contentChanges":[{"range":{"start":{"line":8,"character":37},"end":{"line":8,"character":37}},"rangeLength":0,"text":"\\nfrom hausify.runners import exec_isort"},{"range":{"start":{"line":7,"character":0},"end":{"line":8,"character":0}},"rangeLength":39,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 418
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 418\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/walt/PERSONAL/hausify/hausify/main.py","version":3},"contentChanges":[{"range":{"start":{"line":7,"character":37},"end":{"line":7,"character":37}},"rangeLength":0,"text":"\\nfrom hausify.runners import exec_flake8"},{"range":{"start":{"line":6,"character":0},"end":{"line":7,"character":0}},"rangeLength":40,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 424
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 424\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/walt/PERSONAL/hausify/hausify/main.py","version":4},"contentChanges":[{"range":{"start":{"line":6,"character":37},"end":{"line":6,"character":37}},"rangeLength":0,"text":"\\nfrom hausify.runners import exec_docformatter"},{"range":{"start":{"line":5,"character":0},"end":{"line":6,"character":0}},"rangeLength":46,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 4218
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 4218\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/walt/PERSONAL/hausify/hausify/main.py"},"text":"import sys\\nfrom subprocess import run as subprocess_run\\n\\nfrom hausify.args import parse_args\\nfrom hausify.runners import exec_black\\nfrom hausify.runners import exec_mypy\\nfrom hausify.runners import exec_docformatter\\nfrom hausify.runners import exec_flake8\\nfrom hausify.runners import exec_isort\\nfrom hausify.runners.runner import ToolResult\\nfrom hausify.timings import Timings\\nfrom hausify.util.filesystem import SourceTree\\n\\n\\ndef main() -> None:\\n    args = parse_args()\\n\\n    tree = SourceTree(\\n        args.rootdir,\\n        args.files,\\n        args.exclude_dir,\\n    )\\n\\n    should_exit = False\\n\\n    tool_timings: dict[str, Timings] = {}\\n\\n    if args.tool == \\"all\\" or args.tool == \\"isort\\":\\n        tool_timings[\\"isort\\"] = Timings()\\n        results = exec_isort(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.isort_mode,\\n        )\\n        tool_timings[\\"isort\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"ISORT\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"docformatter\\":\\n        tool_timings[\\"docformatter\\"] = Timings()\\n        results = exec_docformatter(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.docformatter_mode,\\n        )\\n        tool_timings[\\"docformatter\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"DOCFORMATTER\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"mypy\\":\\n        tool_timings[\\"mypy\\"] = Timings()\\n        results = exec_mypy(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n        )\\n        tool_timings[\\"mypy\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"MYPY\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"black\\":\\n        tool_timings[\\"black\\"] = Timings()\\n        results = exec_black(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.black_mode,\\n        )\\n        tool_timings[\\"black\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"BLACK\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"flake8\\":\\n        tool_timings[\\"flake8\\"] = Timings()\\n        results = exec_flake8(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n        )\\n        tool_timings[\\"flake8\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"FLAKE8\\", results)\\n\\n    if should_exit:\\n        sys.exit(1)\\n\\n\\ndef print_timings(timings: dict[str, Timings]) -> None:\\n    \\"\\"\\"Print timings for each tool.\\"\\"\\"\\n    print(\\"\\\\n\\\\nTIMINGS:\\")\\n    print(\\"=\\" * 20)\\n    for tool, timing in timings.items():\\n        if timing is not None:\\n            duration_ms = timing.duration_ms\\n            print(f\\"{tool.upper()}: {duration_ms} ms\\")\\n        else:\\n            print(f\\"{tool.upper()}: Not executed\\")\\n    print(\\"=\\" * 20, \\"\\\\n\\\\n\\")\\n\\n\\ndef print_errors(tool: str, errors: str) -> None:\\n    pass\\n\\n\\ndef print_results(tool: str, results: list[ToolResult]) -> None:\\n    \\"\\"\\"Print errors for a specific tool.\\"\\"\\"\\n    print(\\"|  \\", \\"=\\" * 20)\\n    print(\\"|   TOOL:\\", tool.upper())\\n    print(\\"|  \\", \\"=\\" * 20)\\n    for result in results:\\n        if not result.success:\\n            print(f\\"|   == ERRORS (from config: {result.config})\\")\\n            for error in result.errors:\\n                if error.strip() == \\"\\":\\n                    continue\\n                print(f\\"|        {error}\\")\\n    print(\\"\\\\n\\" * 2)\\n\\n\\nif __name__ == \\"__main__\\":\\n    main()\\n"}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///Users/walt/PERSONAL/hausify/hausify/main.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///Users/walt/PERSONAL/hausify/hausify/main.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 4218
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 4218\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/walt/PERSONAL/hausify/hausify/main.py"},"text":"import sys\\nfrom subprocess import run as subprocess_run\\n\\nfrom hausify.args import parse_args\\nfrom hausify.runners import exec_black\\nfrom hausify.runners import exec_mypy\\nfrom hausify.runners import exec_docformatter\\nfrom hausify.runners import exec_flake8\\nfrom hausify.runners import exec_isort\\nfrom hausify.runners.runner import ToolResult\\nfrom hausify.timings import Timings\\nfrom hausify.util.filesystem import SourceTree\\n\\n\\ndef main() -> None:\\n    args = parse_args()\\n\\n    tree = SourceTree(\\n        args.rootdir,\\n        args.files,\\n        args.exclude_dir,\\n    )\\n\\n    should_exit = False\\n\\n    tool_timings: dict[str, Timings] = {}\\n\\n    if args.tool == \\"all\\" or args.tool == \\"isort\\":\\n        tool_timings[\\"isort\\"] = Timings()\\n        results = exec_isort(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.isort_mode,\\n        )\\n        tool_timings[\\"isort\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"ISORT\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"docformatter\\":\\n        tool_timings[\\"docformatter\\"] = Timings()\\n        results = exec_docformatter(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.docformatter_mode,\\n        )\\n        tool_timings[\\"docformatter\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"DOCFORMATTER\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"mypy\\":\\n        tool_timings[\\"mypy\\"] = Timings()\\n        results = exec_mypy(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n        )\\n        tool_timings[\\"mypy\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"MYPY\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"black\\":\\n        tool_timings[\\"black\\"] = Timings()\\n        results = exec_black(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n            mode=args.black_mode,\\n        )\\n        tool_timings[\\"black\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"BLACK\\", results)\\n\\n    if args.tool == \\"all\\" or args.tool == \\"flake8\\":\\n        tool_timings[\\"flake8\\"] = Timings()\\n        results = exec_flake8(\\n            tree.rootdir,\\n            tree.source_files,\\n            exec_cmd=subprocess_run,\\n        )\\n        tool_timings[\\"flake8\\"].stop()\\n        if any(result.success is False for result in results):\\n            should_exit = True\\n            print_results(\\"FLAKE8\\", results)\\n\\n    if should_exit:\\n        sys.exit(1)\\n\\n\\ndef print_timings(timings: dict[str, Timings]) -> None:\\n    \\"\\"\\"Print timings for each tool.\\"\\"\\"\\n    print(\\"\\\\n\\\\nTIMINGS:\\")\\n    print(\\"=\\" * 20)\\n    for tool, timing in timings.items():\\n        if timing is not None:\\n            duration_ms = timing.duration_ms\\n            print(f\\"{tool.upper()}: {duration_ms} ms\\")\\n        else:\\n            print(f\\"{tool.upper()}: Not executed\\")\\n    print(\\"=\\" * 20, \\"\\\\n\\\\n\\")\\n\\n\\ndef print_errors(tool: str, errors: str) -> None:\\n    pass\\n\\n\\ndef print_results(tool: str, results: list[ToolResult]) -> None:\\n    \\"\\"\\"Print errors for a specific tool.\\"\\"\\"\\n    print(\\"|  \\", \\"=\\" * 20)\\n    print(\\"|   TOOL:\\", tool.upper())\\n    print(\\"|  \\", \\"=\\" * 20)\\n    for result in results:\\n        if not result.success:\\n            print(f\\"|   == ERRORS (from config: {result.config})\\")\\n            for error in result.errors:\\n                if error.strip() == \\"\\":\\n                    continue\\n                print(f\\"|        {error}\\")\\n    print(\\"\\\\n\\" * 2)\\n\\n\\nif __name__ == \\"__main__\\":\\n    main()\\n"}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///Users/walt/PERSONAL/hausify/hausify/main.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///Users/walt/PERSONAL/hausify/hausify/main.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 44
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 44\r\n\r\n{"jsonrpc":"2.0","id":1,"method":"shutdown"}'
DEBUG:pygls.protocol.json_rpc:Request message received.
INFO:pygls.protocol.json_rpc:Sending data: {"id": 1, "jsonrpc": "2.0", "result": null}
DEBUG:pygls.server:Content length: 33
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 33\r\n\r\n{"jsonrpc":"2.0","method":"exit"}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
INFO:pygls.server:Shutting down the server
INFO:pygls.server:Closing the event loop.
